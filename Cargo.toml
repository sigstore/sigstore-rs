[package]
name = "sigstore"
description = "An experimental crate to interact with sigstore"
version = "0.6.0"
edition = "2021"
authors = ["sigstore-rs developers"]
license = "Apache-2.0"
readme = "README.md"

[features]
default = ["full-native-tls", "cached-client", "tuf"]
wasm = ["getrandom/js"]

full-native-tls = [
  "fulcio-native-tls",
  "rekor-native-tls",
  "cosign-native-tls",
  "mock-client-native-tls",
]
full-rustls-tls = [
  "fulcio-rustls-tls",
  "rekor-rustls-tls",
  "cosign-rustls-tls",
  "mock-client-rustls-tls",
]

# This features is used by tests that use docker to create a registry
test-registry = []

fulcio-native-tls = ["oauth-native-tls", "reqwest/native-tls", "fulcio"]
fulcio-rustls-tls = ["oauth-rustls-tls", "reqwest/rustls-tls", "fulcio"]
fulcio = []

oauth-native-tls = ["openidconnect/native-tls", "oauth"]
oauth-rustls-tls = ["openidconnect/rustls-tls", "oauth"]
oauth = []

rekor-native-tls = ["reqwest/native-tls", "rekor"]
rekor-rustls-tls = ["reqwest/rustls-tls", "rekor"]
rekor = ["reqwest"]

tuf = ["tough", "regex"]

cosign-native-tls = [
  "oci-distribution/native-tls",
  "cert",
  "cosign",
  "registry-native-tls",
]
cosign-rustls-tls = [
  "oci-distribution/rustls-tls",
  "cert",
  "cosign",
  "registry-rustls-tls",
]
cosign = []
cert = []

registry-native-tls = ["oci-distribution/native-tls", "registry"]
registry-rustls-tls = ["oci-distribution/rustls-tls", "registry"]
registry = []

mock-client-native-tls = ["oci-distribution/native-tls", "mock-client"]
mock-client-rustls-tls = ["oci-distribution/rustls-tls", "mock-client"]
mock-client = []

cached-client = ["cached"]

[dependencies]
async-trait = "0.1.52"
base64 = "0.21.0"
cached = { version = "0.42.0", optional = true }
cfg-if = "1.0.0"
chrono = { version = "0.4.23" }
const-oid = "0.9.1"
der = "0.7.5"
digest = { version = "0.10.3", default-features = false }
ecdsa = { version = "0.15", features = ["pkcs8", "digest", "der"] }
ed25519 = { version = "2.2.1", features = ["alloc"] }
ed25519-dalek = { version = "2.0.0-rc.2", features = ["pkcs8", "rand_core"] }
elliptic-curve = { version = "0.12.2", features = ["arithmetic", "pem"] }
lazy_static = "1.4.0"
oci-distribution = { version = "0.9", default-features = false, optional = true }
olpc-cjson = "0.1"
openidconnect = { version = "3.0", default-features = false, features = [
  "reqwest",
], optional = true }
p256 = "0.12"
p384 = "0.12"
webbrowser = "0.8.4"
pem = "1.0.2"
picky = { version = "7.0.0-rc.5", default-features = false, features = [
  "x509",
  "ec",
] }
pkcs1 = { version = "0.7.5", features = ["std"] }
pkcs8 = { version = "0.9.0", features = [
  "pem",
  "alloc",
  "pkcs5",
  "encryption",
] }
rand = { version = "0.8.5", features = ["getrandom", "std"] }
getrandom = "0.2.8"
regex = { version = "1.5.5", optional = true }
reqwest = { version = "0.11", default-features = false, features = [
  "json",
  "multipart",
], optional = true }
rsa = "0.8.2"
scrypt = "0.11.0"
serde = { version = "1.0.136", features = ["derive"] }
serde_json = "1.0.79"
sha2 = { version = "0.10.6", features = ["oid"] }
signature = { version = "2.0" }
spki = { version = "0.7.2", features = ["pem", "std"] }
thiserror = "1.0.30"
tokio = { version = "1.17.0", features = ["rt"] }
tough = { version = "0.13", features = ["http"], optional = true }
tracing = "0.1.31"
url = "2.2.2"
x509-cert = { version = "0.1.1", features = ["pem", "std"] }
crypto_secretbox = "0.1.1"
zeroize = "1.5.7"

[dev-dependencies]
anyhow = { version = "1.0", features = ["backtrace"] }
assert-json-diff = "2.0.2"
chrono = "0.4.20"
clap = { version = "4.0.8", features = ["derive"] }
docker_credential = "1.1.0"
openssl = "0.10.38"
rstest = "0.16.0"
serial_test = "2.0.0"
tempfile = "3.3.0"
testcontainers = "0.14"
tracing-subscriber = { version = "0.3.9", features = ["env-filter"] }

# cosign example mappings

[[example]]
name = "verify"
path = "examples/cosign/verify/main.rs"

[[example]]
name = "verify-blob"
path = "examples/cosign/verify-blob/main.rs"

[[example]]
name = "verify-bundle"
path = "examples/cosign/verify-bundle/main.rs"

[[example]]
name = "sign"
path = "examples/cosign/sign/main.rs"

# openidconnect example mappings

[[example]]
name = "openidconnect"
path = "examples/openidflow/openidconnect/main.rs"

# key interface mappings

[[example]]
name = "key_pair_gen_sign_verify"
path = "examples/key_interface/key_pair_gen_sign_verify/main.rs"

[[example]]
name = "key_pair_gen_and_export"
path = "examples/key_interface/key_pair_gen_and_export/main.rs"

[[example]]
name = "key_pair_import"
path = "examples/key_interface/key_pair_import/main.rs"

# rekor example mappings

[[example]]
name = "create_log_entry"
path = "examples/rekor/create_log_entry/main.rs"

[[example]]
name = "get_log_entry_by_index"
path = "examples/rekor/get_log_entry_by_index/main.rs"

[[example]]
name = "get_log_entry_by_uuid"
path = "examples/rekor/get_log_entry_by_uuid/main.rs"

[[example]]
name = "get_log_info"
path = "examples/rekor/get_log_info/main.rs"

[[example]]
name = "get_log_proof"
path = "examples/rekor/get_log_proof/main.rs"

[[example]]
name = "get_public_key"
path = "examples/rekor/get_public_key/main.rs"

[[example]]
name = "search_index"
path = "examples/rekor/search_index/main.rs"

[[example]]
name = "search_log_query"
path = "examples/rekor/search_log_query/main.rs"

[[example]]
name = "fulcio_cert"
path = "examples/fulcio/cert/main.rs"
