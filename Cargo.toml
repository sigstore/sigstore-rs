[package]
authors = ["sigstore-rs developers"]
description = "An experimental crate to interact with sigstore"
edition = "2024"
license = "Apache-2.0"
name = "sigstore"
readme = "README.md"
repository = "https://github.com/sigstore/sigstore-rs"
version = "0.13.0"

[package.metadata.docs.rs]
all-features = true

[features]
default = ["full", "native-tls"]

bundle = ["sign", "verify"]
cached-client = ["dep:cached"]
cert = ["dep:aws-lc-rs", "rustls-webpki/aws-lc-rs"]
cosign = [
    "cert",
    "dep:async-trait",
    "dep:cfg-if",
    "dep:oci-client",
    "dep:olpc-cjson",
    "dep:regex",
    "registry",
]
fulcio = [
    "dep:reqwest",
    "dep:serde_repr",
    "dep:serde_with",
    "dep:webbrowser",
    "oauth",
]
full = [
    "bundle",
    "cached-client",
    "cosign",
    "fulcio",
    "mock-client",
    "rekor",
    "sigstore-trust-root",
]
mock-client = ["dep:async-trait", "dep:oci-client"]
native-tls = [
    "oci-client?/native-tls",
    "openidconnect?/native-tls",
    "reqwest?/native-tls",
]
oauth = ["dep:openidconnect", "dep:reqwest"]
registry = ["dep:async-trait", "dep:oci-client", "dep:olpc-cjson"]
rekor = ["dep:reqwest"]
rustls-tls = [
    "oci-client?/rustls-tls",
    "openidconnect?/rustls-tls",
    "reqwest?/rustls-tls",
]
# This feature flag is used to allow using the platform's native certificate store
# when using rustls suites
rustls-tls-native-roots = ["oci-client?/rustls-tls-native-roots"]
sign = [
    "cert",
    "dep:hex",
    "dep:json-syntax",
    "dep:sigstore_protobuf_specs",
    "fulcio",
    "rekor",
]
sigstore-trust-root = [
    "dep:futures",
    "dep:futures-util",
    "dep:hex",
    "dep:reqwest",
    "dep:sigstore_protobuf_specs",
    "dep:tough",
    "tokio/sync",
]
test-registry = [] # used for testing against a test registry
verify = [
    "cert",
    "dep:hex",
    "dep:json-syntax",
    "dep:sigstore_protobuf_specs",
    "fulcio",
    "rekor",
]
wasm = ["chrono/wasmbind", "getrandom/js", "ring?/wasm32_unknown_unknown_js"]

[dependencies]
async-trait = { version = "0.1", optional = true, default-features = false }
base64 = { version = "0.22", default-features = false, features = ["std"] }
cached = { version = "0.56", optional = true, features = ["async"] }
cfg-if = { version = "1.0.0", optional = true, default-features = false }
chrono = { version = "0.4", default-features = false, features = [
    "now",
    "serde",
] }
const-oid = { version = "0.9", default-features = false, features = ["db"] }
crypto_secretbox = { version = "0.1", default-features = false, features = [
    "alloc",
    "salsa20",
] }
digest = { version = "0.10", default-features = false }
ecdsa = { version = "0.16", default-features = false, features = [
    "der",
    "digest",
    "pkcs8",
    "signing",
    "std",
] }
ed25519 = { version = "2.2", default-features = false, features = ["alloc"] }
ed25519-dalek = { version = "2.1", default-features = false, features = [
    "alloc",
    "pkcs8",
    "rand_core",
] }
elliptic-curve = { version = "0.13", default-features = false, features = [
    "arithmetic",
    "pem",
    "std",
] }
futures = { version = "0.3", default-features = false, optional = true }
futures-util = { version = "0.3", default-features = false, optional = true }
getrandom = { version = "0.3", default-features = false, optional = true }
hex = { version = "0.4", default-features = false, optional = true, features = [
    "std",
] }
json-syntax = { version = "0.12", default-features = false, features = [
    "canonicalize",
    "serde",
], optional = true }
oci-client = { version = "0.15", default-features = false, optional = true }
olpc-cjson = { version = "0.1", default-features = false, optional = true }
openidconnect = { version = "4.0", default-features = false, features = [
    "reqwest",
    "reqwest-blocking",
], optional = true }
p256 = { version = "0.13", default-features = false, features = [
    "arithmetic",
    "ecdsa",
    "pem",
    "std",
] }
p384 = { version = "0.13", default-features = false, features = [
    "arithmetic",
    "ecdsa",
    "pem",
    "std",
] }
pem = { version = "3.0", default-features = false, features = ["serde", "std"] }
pkcs1 = { version = "0.7", default-features = false, features = ["std"] }
pkcs8 = { version = "0.10", default-features = false, features = [
    "encryption",
    "pem",
    "pkcs5",
    "std",
] }
pki-types = { package = "rustls-pki-types", version = "1.11", default-features = false }
rand = { version = "0.8", default-features = false, features = [
    "getrandom",
    "std",
] }
regex = { version = "1.10", default-features = false, optional = true }
reqwest = { version = "0.12", default-features = false, features = [
    "json",
    "multipart",
], optional = true }
ring = { version = "0.17", default-features = false, optional = true }
rsa = { version = "0.9", default-features = false, features = ["std"] }
rustls-webpki = { version = "0.103", default-features = false, features = [
    "std",
] }
scrypt = { version = "0.11", default-features = false, features = [
    "simple",
    "std",
] }
serde = { version = "1.0", default-features = false, features = ["derive"] }
serde_json = { version = "1.0", default-features = false, features = ["std"] }
serde_repr = { version = "0.1", default-features = false, optional = true }
serde_with = { version = "3.9", default-features = false, features = [
    "base64",
    "json",
], optional = true }
sha2 = { version = "0.10", default-features = false, features = ["oid"] }
signature = { version = "2.2", default-features = false }
sigstore_protobuf_specs = { version = "0.5", default-features = false, optional = true }
thiserror = { version = "2.0", default-features = false, features = ["std"] }
tls_codec = { version = "0.4", default-features = false, features = ["derive"] }
tokio = { version = "1", default-features = false, features = ["rt"] }
tokio-util = { version = "0.7", default-features = false, features = [
    "io-util",
] }
tough = { version = "0.21", default-features = false, features = [
    "http",
], optional = true }
tracing = { version = "0.1", default-features = false }
url = { version = "2.5", default-features = false }
webbrowser = { version = "1.0", default-features = false, optional = true }
x509-cert = { version = "0.2", default-features = false, features = [
    "builder",
    "pem",
    "sct",
    "std",
] }
zeroize = { version = "1.8", default-features = false }

[dev-dependencies]
anyhow = { version = "1.0", default-features = false, features = [
    "backtrace",
    "std",
] }
assert-json-diff = { version = "2.0", default-features = false }
clap = { version = "4.5", default-features = false, features = [
    "color",
    "derive",
    "error-context",
    "help",
    "std",
    "suggestions",
    "usage",
] }
docker_credential = { version = "1.3", default-features = false }
openssl = { version = "0.10", default-features = false }
rstest = { version = "0.26", default-features = false }
serial_test = { version = "3.1", default-features = false }
tempfile = { version = "3.12", default-features = false }
testcontainers = { version = "0.25", default-features = false, features = [
    "aws-lc-rs",
] }
tracing-subscriber = { version = "0.3", default-features = false, features = [
    "ansi",
    "env-filter",
    "fmt",
    "smallvec",
    "std",
    "tracing-log",
] }

[target.'cfg(not(target_arch = "powerpc64"))'.dependencies]
aws-lc-rs = { version = "1", optional = true }

[target.'cfg(target_arch = "powerpc64")'.dependencies]
aws-lc-rs = { version = "1", optional = true, features = ["bindgen"] }

# cosign example mappings

[[example]]
name = "verify"
path = "examples/cosign/verify/main.rs"

[[example]]
name = "verify-blob"
path = "examples/cosign/verify-blob/main.rs"

[[example]]
name = "verify-bundle"
path = "examples/cosign/verify-bundle/main.rs"

[[example]]
name = "sign"
path = "examples/cosign/sign/main.rs"

# openidconnect example mappings

[[example]]
name = "openidconnect"
path = "examples/openidflow/openidconnect/main.rs"

# key interface mappings

[[example]]
name = "key_pair_gen_sign_verify"
path = "examples/key_interface/key_pair_gen_sign_verify/main.rs"

[[example]]
name = "key_pair_gen_and_export"
path = "examples/key_interface/key_pair_gen_and_export/main.rs"

[[example]]
name = "key_pair_import"
path = "examples/key_interface/key_pair_import/main.rs"

# rekor example mappings

[[example]]
name = "create_log_entry"
path = "examples/rekor/create_log_entry/main.rs"

[[example]]
name = "get_log_entry_by_index"
path = "examples/rekor/get_log_entry_by_index/main.rs"

[[example]]
name = "get_log_entry_by_uuid"
path = "examples/rekor/get_log_entry_by_uuid/main.rs"

[[example]]
name = "get_log_info"
path = "examples/rekor/get_log_info/main.rs"

[[example]]
name = "get_log_proof"
path = "examples/rekor/get_log_proof/main.rs"

[[example]]
name = "get_public_key"
path = "examples/rekor/get_public_key/main.rs"

[[example]]
name = "search_index"
path = "examples/rekor/search_index/main.rs"

[[example]]
name = "search_log_query"
path = "examples/rekor/search_log_query/main.rs"

[[example]]
name = "fulcio_cert"
path = "examples/fulcio/cert/main.rs"
